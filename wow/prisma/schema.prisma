generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Word {
  id              Int           @id @default(autoincrement()) @map("word_id")
  word            String
  meaning         String
  difficultyLevel Int          @default(1)
  userId          Int?          @map("user_id")
  quizHistories   QuizHistory[]
  user            User?         @relation(fields: [userId], references: [id])

  @@map("words")
}

model User {
  id            Int            @id @default(autoincrement()) @map("user_id")
  username      String         @unique
  email         String         @unique
  passwordHash  String         @map("password_hash")
  gachapoint Int @default(0)
  createdAt     DateTime       @default(now()) @map("created_at")
  quizHistories QuizHistory[]
  userCharacter UserCharacter?
  words         Word[]
  questSessions  QuestSession[]
  user_items      user_items[]
  gacha_history   gacha_history[]

  @@map("users")
}

model UserCharacter {
  userId      Int      @id @map("user_id")
  level       Int      @default(1) @map("current_level")
  experience  Int      @default(0) @map("current_experience")
  lastUpdated DateTime @default(now()) @updatedAt @map("last_updated")
  levelStatusId Int?     @map("level_status_id")
  levelStatus   LevelStatus? @relation(fields: [levelStatusId], references: [level])

  user        User     @relation(fields: [userId], references: [id])

  @@map("user_characters")
}

model LevelStatus {
  level              Int     @id
  requiredExperience Int     @map("required_experience")
  characterImage     String  @map("character_image")
  attackPower        Int     @map("attack_power")
  defensePower       Int     @map("defense_power")
  skillUnlocked      String? @map("skill_unlocked")
  hp                 Int
  userCharacters UserCharacter[]


  @@map("level_statuses")
}

model QuizHistory {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  wordId     Int      @map("word_id")
  isCorrect  Boolean  @map("is_correct")
  answeredAt DateTime @default(now()) @map("answered_at")
  user       User     @relation(fields: [userId], references: [id])
  word       Word     @relation(fields: [wordId], references: [id])

  @@map("quiz_histories")
}


model Experience{
  difficultyLevel Int @id
  getexperience Int     @map("get_experience")

  @@map("experience")
}


model Boss{
  id Int @id @default(autoincrement())
  name String @unique
  initialHp Int @map("initial_hp")
  attack Int @map("attack_power")
  defense Int @map("defense_power")
  imageUrl String @map("image_url")
  questSessions QuestSession[]


  @@map("bosses")
}


model QuestSession {
  id               Int       @id @default(autoincrement())
  userId           Int
  bossId           Int
  userCurrentHp    Int       @map("user_current_hp")
  bossCurrentHp    Int       @map("boss_current_hp")
  currentProblemIndex Int    @map("current_problem_index") @default(0) // 現在の問題が何問目か
  questStatus      String    @default("ongoing") // "ongoing", "completed", "failed"
  startedAt        DateTime  @default(now())
  lastUpdated      DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  boss             Boss      @relation(fields: [bossId], references: [id])

  @@map("quest_sessions")
}

// 💡 ガチャ機能用の新しいテーブルを追加

// ガチャで排出されるアイテムのレア度を定義
enum GachaRarity {
    COMMON
    RARE
    SUPER_RARE
    ULTRA_RARE
}

// ガチャで手に入るアイテムを管理するテーブル
model gacha_items {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    rarity      Int
    image_url   String
    type        String?

    // user_items と gacha_history からの参照
    userItems   user_items[]
    gachaHistory gacha_history[]
}

// ユーザーが所持しているアイテムを管理するテーブル
model user_items {
    id          Int      @id @default(autoincrement())
    quantity    Int      @default(1)
    isEquipped  Boolean  @default(false)
    createdAt   DateTime @default(now())

    // ユーザーへのリレーション
    userId      Int
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    // ガチャアイテムへのリレーション
    gachaItemId Int
    gachaItem   gacha_items @relation(fields: [gachaItemId], references: [id], onDelete: Cascade)
}

// ガチャの実行履歴を記録するテーブル
model gacha_history {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())

    // ユーザーへのリレーション
    userId      Int
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    // ガチャアイテムへのリレーション
    gachaItemId Int
    gachaItem   gacha_items @relation(fields: [gachaItemId], references: [id])
}
